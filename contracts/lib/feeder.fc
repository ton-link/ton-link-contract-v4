() feeder::execute::add(slice from_address, slice msg, int input_amount) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        var (_, key_addr) = parse_std_addr(from_address);
        throw_unless(99, input_amount == 1000000000);
        throw_if(100, check_slice_for_empty?(feeder_list.udict_get_maybe_ref(256, key_addr)));

        cell new_feeder = begin_cell()
                .store_slice(from_address)
                .store_uint(0, 2)
                .store_uint(feeder_number + 1, 64)
                .store_uint(now(), 64)
        .end_cell();

        int power = math::CalculatePower(input_amount);
        cell new_feeder_with_power = begin_cell()
                .store_slice(from_address)
                .store_uint(0, 2)
                .store_uint(power, 64)
        .end_cell();

        feeder_list~udict_set_ref(256, key_addr, new_feeder);
        feeder_list_for_chosing~udict_set_ref(64, feeder_number + 1, new_feeder_with_power);

        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list, er, last_update_time);
        return ();
}

() feeder::execute::remove(slice msg, slice from_address, int input_amount) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        var (_, key_addr) = parse_std_addr(from_address);
        throw_unless(101, check_slice_for_empty?(feeder_list.udict_get_maybe_ref(256, key_addr)));

        slice feeder = (feeder_list.udict_get_maybe_ref(256, key_addr)).begin_parse();

        slice feeder_address = feeder~load_msg_addr();
        int status = feeder~load_uint(2);
        int feeder_number_from_cell = feeder~load_uint(64);

        var msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(feeder_address)
              .store_grams(30000000000000)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
        send_raw_message(msg, 3);

        cell new_feeder = begin_cell()
                .store_slice(from_address)
                .store_uint(1, 2)
                .store_uint(feeder_number_from_cell, 64)
                .store_uint(now(), 64)
        .end_cell();

        cell new_feeder_with_power = begin_cell()
                .store_slice(from_address)
                .store_uint(1, 2)
                .store_uint(0, 64)
        .end_cell();

        feeder_list~udict_set_ref(256, key_addr, new_feeder);
        feeder_list_for_chosing~udict_set_ref(64, feeder_number_from_cell, new_feeder_with_power);

        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list, er, last_update_time);
        return ();
}