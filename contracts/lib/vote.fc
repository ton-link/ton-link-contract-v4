() vote::execute::Vote(slice sender_address, slice msg) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        var (_, key_addr) = parse_std_addr(sender_address);
        throw_unless(101, check_slice_for_empty?(feeder_list.udict_get_maybe_ref(256, key_addr)));
        int data = msg~load_uint(64);

        cell vote = begin_cell()
                .store_uint(1, 2)
                .store_uint(data, 64)
                .store_slice(sender_address)
                .store_uint(now(), 64)
        .end_cell();

        vote_list~udict_set_ref(256, key_addr, vote);
        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list, er, last_update_time);
        return ();
}

() vote::execute::EndVotePeriod() impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        (slice feeder_weighted_median, int found) = ballot::WeightedMedian(feeder_list_for_chosing, vote_list, feeder_number);
        var (_, key_addr) = parse_std_addr(feeder_weighted_median);
        slice vote_median = (vote_list.udict_get_maybe_ref(256, key_addr)).begin_parse();
        vote_median~load_uint(2);
        int weightedMedian = vote_median~load_uint(64);

        ;;int standardDeviation = ballot::StandardDeviation(pb, vote_list, feeder_max_number);
        ;;int rewardBand = 1; ;; CONST
        ;;int rewardSpread = (weightedMedian / 1000) * rewardBand;
        ;;if (rewardSpread < standardDeviation) {
        ;;        rewardSpread = standardDeviation;
        ;;}



        return ();
}

