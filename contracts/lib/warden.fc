() warden::execute::add(slice from_address, slice msg, int input_amount) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        var (_, key_addr) = parse_std_addr(from_address);
        throw_if(100, check_slice_for_empty?(warden_list.udict_get_maybe_ref(256, key_addr)));

        cell new_warden = begin_cell()
                .store_slice(from_address)
        .end_cell();

        warden_list~udict_set_ref(256, key_addr, new_warden);

        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list, er, last_update_time);
        return ();
}

() warden::execute::remove(slice msg, slice from_address, int input_amount) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        var (_, key_addr) = parse_std_addr(from_address);
        throw_unless(101, check_slice_for_empty?(warden_list.udict_get_maybe_ref(256, key_addr)));

        warden_list~udict_delete?(256, key_addr);
        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list, er, last_update_time);
        return ();
}

() warden::execute::endblock(slice from_address) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list, int er, int last_update_time) = storage::load_data();
        var (_, key_addr) = parse_std_addr(from_address);
        throw_unless(100, check_slice_for_empty?(warden_list.udict_get_maybe_ref(256, key_addr)));
        int period = now() - last_update_time;
        if( period == 30 ) {
                vote::execute::EndVotePeriod();
        }
        return ();
}