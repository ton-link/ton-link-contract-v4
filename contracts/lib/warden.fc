() feeder::execute::add(slice from_address, slice msg, int input_amount) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list) = storage::load_data();
        throw_unless(99, input_amount == 30000000000000);
        var (_, key_addr) = parse_std_addr(from_address);
        throw_if(100, check_slice_for_empty?(warden_list.udict_get_maybe_ref(256, key_addr)));

        cell new_warden = begin_cell()
                .store_slice(from_address)
                .store_uint(0, 2)
                .store_uint(now(), 64)
        .end_cell();

        warden_list~udict_set_ref(256, key_addr, new_warden);

        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list);
        return ();
}

() feeder::execute::remove(slice msg, slice from_address, int input_amount) impure {
        (cell feeder_list, cell feeder_list_for_chosing, int feeder_number, cell vote_list, cell warden_list) = storage::load_data();
        var (_, key_addr) = parse_std_addr(from_address);
        throw_unless(101, check_slice_for_empty?(warden_list.udict_get_maybe_ref(256, key_addr)));

        warden_list~udict_delete?(256, key_addr);
        storage::save_data(feeder_list, feeder_list_for_chosing, feeder_number, vote_list, warden_list);
        return ();
}